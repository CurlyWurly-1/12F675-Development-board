//
//  POC software UART in a pic12F675.
//  Works reasionably well but needs to be timed better 
//
//

#include <xc.h>

// This is the Configuration section
#pragma config FOSC  = INTRCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-Up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // GP3/MCLR pin function select (GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP    = OFF      // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD   = OFF      // Data Code Protection bit (Data memory code protection is disabled)

#define _XTAL_FREQ 4000000

#define Baudrate              2600                      // This seems to work for 2400 
//#define Baudrate              1280                      // This seems to work for 1200 
#define OneBitDelay           (1000000/Baudrate)
#define DataBitCount          8                         // no parity, no flow control
#define UART_RX               GPIO4						// UART RX pin
#define UART_TX               GPIO5						// UART TX pin
#define UART_RX_DIR			  TRISIO4					// UART RX pin direction register
#define UART_TX_DIR			  TRISIO5					// UART TX pin direction register

//Function Declarations
unsigned char UART_Receive(void);
void UART_Transmit(const char);


//************************************************************************
// Main 
//************************************************************************
void main()
{	
    ANSEL  = 0x00;             // Set ports as digital I/O, not analog input
    ADCON0 = 0x00;          // Shut off the A/D Converter
    CMCON  = 0x07;          // Shut off the Comparator
    VRCON  = 0x00;         // Shut off the Voltage Reference
    GPIO   = 0b111111;        // Make all pins high 
//    UART_TX     = 1;		// TX pin is high in idle state
    TRISIO = 0b111100;        // only GPIO0 and GPIO1 to be outputs
	UART_RX_DIR = 1;		// Input
	UART_TX_DIR = 0;		// Output

  	unsigned char ch = 0;
	while(1)
	{
		ch = UART_Receive();	// Receive a character from UART
        UART_Transmit(ch);		// Echo back that character
	}
}

//************************************************************************
// UART_Receive 
//************************************************************************
unsigned char UART_Receive(void)
{
	unsigned char DataValue = 0;

	while(UART_RX==1);          //wait for start bit

	__delay_us(OneBitDelay);
	__delay_us(OneBitDelay/2);   // Take sample value in the mid of bit duration

	for ( unsigned char i = 0; i < DataBitCount; i++ )
	{
		if ( UART_RX == 1 )   //if received bit is high
		{
			DataValue += (1<<i);
		}

		__delay_us(OneBitDelay);
	}

	// Check for stop bit
	if ( UART_RX == 1 )       //Stop bit should be high
	{
		__delay_us(OneBitDelay/2);
		return DataValue;
	}
	else                      //some error occurred !
	{
		__delay_us(OneBitDelay/2);
		return 0x000;
	}
}

//************************************************************************
// UART_Transmit 
//************************************************************************
void UART_Transmit(const char DataValue)
{
/* Basic Logic
   TX pin is usually high. A high to low bit is the starting bit and 
   a low to high bit is the ending bit. No parity bit. No flow control.
   BitCount is the number of bits to transmit. Data is transmitted LSB first.
*/

// Send Start Bit
	UART_TX = 0;
	__delay_us(OneBitDelay);

	for ( unsigned char i = 0; i < DataBitCount; i++ )
	{
// Set Data pin according to the DataValue
		if( ((DataValue>>i)&0x1) == 0x1 )   //if Bit is high
		{
			UART_TX = 1;
		}
		else                                //if Bit is low
		{
			UART_TX = 0;
		}
	    __delay_us(OneBitDelay);
	}

// Send Stop Bit
	UART_TX = 1;
	__delay_us(OneBitDelay);
}