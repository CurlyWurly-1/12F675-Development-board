// This program blinks "LED1" normally. 
// When Button "Key1" is pressed, it grounds GPIO2 (and so the falling edge triggers an interrupt)
// When the interrupt is triggered,  the code in "interrupt1" is executed which quickly blinks "LED2" 8 times 
// When the interrupt code completes, the program returns to where it was in the "main" code (usually somewhere within the delay statement)
// Be aware there could be switch bounce when you release the button !! 

/////////////////////////// MAKEUP OF BOARD //////////////////////////////////
// The default connections for the 6 pins is as follows (if you leave the links in)
// - GPIO0 - "LED1" - Output   
// - GPIO1 - "LED2" - Output  
// - GPIO2 - "KEY1" - Input - Right  button (if button not closed to ground, pin is pulled high by 10K resistor) 
// - GPIO3 - "REST" - Input - Left   button (if button not closed to ground, pin is pulled high by 10K resistor - N.B. This is the MCLR pin - SHOULD ALWAYS BE AN INPUT)
// - GPIO4 - "ADC"  - Input - Variable Resistor 
// - GPIO5 - "KEY2" - Input - Middle button (if button not closed to ground, pin is pulled high by 10K resistor)   
// When a Switch is pressed, it grounds the pin (the pin is normally kept high by a 10K resistor to 5V)
// One leg of the LEDS is connected to 5V. This means that to make the LED light up, you have send 0V to its associated pin 
/////////////////////////// MAKEUP OF BOARD //////////////////////////////////

// This is the Configuration section
#pragma config FOSC  = INTRCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-Up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // GP3/MCLR pin function select (GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP    = OFF      // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD   = OFF      // Data Code Protection bit (Data memory code protection is disabled)
#define _XTAL_FREQ 4000000
#include <xc.h>



void __interrupt() interupt1(void);

//***************************************************************
//* main 
//***************************************************************

int main() {

// Initialisation
    TRISIO  = 0b111111; // First line - always set all pins as inputs !!!  
    CMCON   = 7;        // Turn comparators off  (The default is that they are on)
    ANSEL   = 0;        // Switch off ADC (Configure all pins to be digital only)
    INTE    = 1;        // Enable GPIO2 to be an interrupt pin
    INTEDG  = 0;        // Set trigger to be a falling edge (when the switch is pressed)
    PEIE    = 0;        // Disable peripheral interrupts       
    GIE     = 1;        // Enable global interrupts
    GPIO0   = 1;        // Switch "LED1" off     
    GPIO1   = 1;        // Switch "LED2" off     
    TRISIO  = 0b111100; // Set the 2 led pins as outputs   

// Program loop
    while (1) {
        GPIO0=GPIO0^1;          // Toggle "LED1" ON and OFF            
        __delay_ms(750);        
    }

    return 0;
}

//***************************************************************
//* interrupt1 (interrupt routine)
//***************************************************************
void __interrupt() interupt1(void) {
    if (INTF) { //check external interrupt flag bit       
        int a;
        for (a = 0; a < 16; a++) {
            GPIO1=GPIO1^1;  // Toggle "LED2" ON            
             __delay_ms(50);             
        }
//        GPIO1= 1;   // Always make sure LED2 is off when interrupt ends ?
        INTF = 0;
    };
}
