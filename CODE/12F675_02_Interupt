//This program blinks 2 LEDS
// N.B. If the "REST" button (LEFT)   is pressed and held down, the "on" time is shortened

// The default connections for the 6 pins is as follows 
// - GPIO0 - "LED1" - Output   
// - GPIO1 - "LED2" - Output  
// - GPIO2 - "KEY1" - Input - Right  button (if button not closed to ground, pin is pulled high by 10K resistor) 
// - GPIO3 - "REST" - Input - Left   button (if button not closed to ground, pin is pulled high by 10K resistor - N.B. This is the MCLR pin - SHOULD ALWAYS BE AN INPUT)
// - GPIO4 - "ADC"  - Input - Variable Resistor 
// - GPIO5 - "KEY2" - Input - Middle button (if button not closed to ground, pin is pulled high by 10K resistor)   

#pragma config FOSC  = INTRCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-Up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // GP3/MCLR pin function select (GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP    = OFF      // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD   = OFF      // Data Code Protection bit (Data memory code protection is disabled)


#define _XTAL_FREQ 4000000
#include <xc.h>

 void __interrupt() interupt1 (void);

 void __interrupt() interupt1 (void) {
      if(INTF){	          	//check external interrupt flag bit       
           int a;        
           for(a=0; a<20; a++)           {             
//                GPIO4=GPIO4^1;             
//                __delay_ms(30);             
                GPIO1=0;             
                __delay_ms(30);  
                GPIO1=1;             
                __delay_ms(30);  
           }        
      INTF=0;        
      };  
 }; 

int main() {

    GIE=1; //global interrupts enable   // these 4 bits are of INTCON
    INTEDG=0;  //falling edge
    INTE=1; //enable int0
    //PEIE=1; //peripheral interrupts enable       

    // Set the 6 pins as input or output (MSB)
    // where "1=Input" and "0=Output"    
    TRISIO = 0b101100;    
//    TRISIO0=0; //led1 out
//    TRISIO5=0; //led2 out

    // Set low values to all pins 
    //    GPIO = 0b111111;      
        GPIO0=0;  //led off at main
    
    ANS2=0;//Setting INT(GPIO2) as special function pin,As per note given for setting ansel register





    // Make all pins to be digital only (no ADC) 
 //   ANSEL = 0b000000;       //adc off - digital in/out   
//    CMCON = 7;              //turns comparators off       

//    OPTION = 0b01000111;       


//    CMCON  = 7; //turns comparators off       
//    INTCON = 0b1001000;		//external interrupt enabled on GPIO2   
//    OPTION_REGbits.INTEDG = 1; //Interrupt on rising edge of INT pin
//    INTCONbits.INTF = 0; //CLEAR INTERRUPT FLAG BIT
//    INTE = 1;
//    GIE = 1;

    while (1) {

        // Set High values to the 3 output pins (switches the 3 LEDS off))
        GPIO0 = 1;

        // Check if REST Switch is pressed and held down
        // by reading Pin 4 (GPIO3)
        // If the "REST" Switch is pressed, pin4 is pulled low to ground
        // otherwise it is normally pulled high by a 10K resistor
        if (GPIO3 == 0) {
            __delay_ms(150); // 150ms
        } else {
            __delay_ms(300); // 300ms  
        }

        // Turn on LEDs by outputting a LOW     
//        GPIO = 0;
        GPIO0 = 0;
//        GPIO1 = 0;
        // This determines the time while LED is off 
        __delay_ms(75); // 75ms


        if (GPIO2 == 0) {
//            SLEEP();
        };


    }

    return 0;
}
