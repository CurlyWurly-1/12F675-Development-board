// This program blinks the 2 LEDS (LED1 and LED2) 
// If the "REST" (left) button is pressed and held down, the LED "on" time is shortened

/////////////////////////// MAKEUP OF BOARD //////////////////////////////////
// The default connections for the 6 pins is as follows (if you leave the links in)
// - GPIO0 - "LED1" - Output   
// - GPIO1 - "LED2" - Output  
// - GPIO2 - "KEY1" - Input - Right  button (if button not closed to ground, pin is pulled high by 10K resistor) 
// - GPIO3 - "REST" - Input - Left   button (if button not closed to ground, pin is pulled high by 10K resistor - N.B. This is the MCLR pin - SHOULD ALWAYS BE AN INPUT)
// - GPIO4 - "ADC"  - Input - Variable Resistor 
// - GPIO5 - "KEY2" - Input - Middle button (if button not closed to ground, pin is pulled high by 10K resistor)   
// When a Switch is pressed, it grounds the pin (the pin is normally kept high by a 10K resistor to 5V)
// One leg of the LEDS is connected to 5V. This means that to make the LED light up, you have send 0V to its associated pin 
/////////////////////////// MAKEUP OF BOARD //////////////////////////////////


// This is the Configuration section
#pragma config FOSC  = INTRCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-Up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // GP3/MCLR pin function select (GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP    = OFF      // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD   = OFF      // Data Code Protection bit (Data memory code protection is disabled)
#define _XTAL_FREQ 4000000
#include <xc.h>

//***************************************************************
//* Main
//***************************************************************
int main() {

// Initialisation
    TRISIO  = 0b111111;         // First line - always set all pins as inputs !!!      
    CMCON   = 7;                // Turn comparators off  (The default is that they are on)
    ANSEL   = 0;                // Switch off ADC (Configure all pins to be digital only)
    GPIO0   = 1;                // Set LED1 to High (not lit)        
    GPIO1   = 1;                // Set LED2 to High (not lit)       
    TRISIO  = 0b111100;         // Configure GPIO0 and GPIO1 as outputs and the other 4 pins as inputs 

    
// MAIN LOOP 
    while (1) {

        GPIO0 = 1;              // Switch "LED1" off     
        GPIO1 = 1;              // Switch "LED2" off              
       // GPIO = 0b111100;      // This is an alternative way to set values to all 6 pins
        
        // Check if "REST" Switch is pressed and held down - if so, shorten the delay
        if (GPIO3 == 0) {
            __delay_ms(100);    // This determines the time while LED is on 
        } else {
            __delay_ms(300);    // This determines the time while LED is on   
        }

        GPIO0 = 0;              // Switch "LED1" ON     
        GPIO1 = 0;              // Switch "LED2" ON     
        // GPIO = 0;            // This is an alternative way to set a zero value to all 6 pins
        __delay_ms(75);         // This determines the time while LED is on 
    }

    return 0;
}
