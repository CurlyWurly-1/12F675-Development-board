//This program blinks 2 LEDS
// N.B. If the "REST" button (LEFT)   is pressed and held down, the "on" time is shortened

// The default connections for the 6 pins is as follows 
// - GPIO0 - "LED1" - Output   
// - GPIO1 - "LED2" - Output  
// - GPIO2 - "KEY1" - Input - Right  button (if button not closed to ground, pin is pulled high by 10K resistor) 
// - GPIO3 - "REST" - Input - Left   button (if button not closed to ground, pin is pulled high by 10K resistor - N.B. This is the MCLR pin - SHOULD ALWAYS BE AN INPUT)
// - GPIO4 - "ADC"  - Input - Variable Resistor 
// - GPIO5 - "KEY2" - Input - Middle button (if button not closed to ground, pin is pulled high by 10K resistor)   

#pragma config FOSC  = INTRCIO  // Oscillator Selection bits (INTOSC oscillator: I/O function on GP4/OSC2/CLKOUT pin, I/O function on GP5/OSC1/CLKIN)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT disabled)
#pragma config PWRTE = OFF      // Power-Up Timer Enable bit (PWRT disabled)
#pragma config MCLRE = OFF      // GP3/MCLR pin function select (GP3/MCLR pin function is digital I/O, MCLR internally tied to VDD)
#pragma config BOREN = OFF      // Brown-out Detect Enable bit (BOD disabled)
#pragma config CP    = OFF      // Code Protection bit (Program Memory code protection is disabled)
#pragma config CPD   = OFF      // Data Code Protection bit (Data memory code protection is disabled)


#define _XTAL_FREQ 4000000
#include <xc.h>

int main() {

    // Configure the 6 pins (MSB)
    // where "1=Input" and "0=Output"    
    // e.g. This command configures GPIO0 and GPIO1 as outputs
    TRISIO = 0b111100;

    // Set High values to all pins (leds and switches are off) 
    GPIO = 0b111111;

    while (1) {

        // If the "REST" Switch is pressed, GPIO3 (pin4) is pulled low by the button closing the contact to ground
        // Check if "REST" Switch is pressed and held down
        if (GPIO3 == 0) {
            __delay_ms(200); // 100ms
        } else {
            __delay_ms(500); // 500ms  
        }

        // Turn on LEDs by outputting a LOW     
        // GPIO = 0;
        GPIO0 = 0;
        GPIO1 = 0;
        // This determines the time while LED is on 
        __delay_ms(100); // 100ms

    }

    return 0;
}
